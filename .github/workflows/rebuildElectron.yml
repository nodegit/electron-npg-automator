on:
  push:
    tags:
      - ena-*

name: Rebuild for Electron

jobs:
  rebuild-docker:
    name: Rebuild docker
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - name: Install Dependencies for Ubuntu
        # git >= 2.18 required for actions/checkout git support
        run: apt update && apt install -y software-properties-common && add-apt-repository -y ppa:git-core/ppa && apt update && apt install -y git wget build-essential clang python3 libkrb5-dev libc++-dev zlib1g-dev libssl-dev
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      # v4 requires node 20, which won't run due to GLIBC 2.28+ requirement
      - uses: actions/checkout@v3

      # v4 requires node 20, which won't run due to GLIBC 2.28+ requirement
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 16

      # We're running in docker without other users
      - name: Set npm config
        run: npm config set unsafe-perm true

      - run: git config --global --add safe.directory /__w/electron-npg-automator/electron-npg-automator
      - run: npm install
      - run: npm run compile
      - run: node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true

  rebuild-windows:
    name: Rebuild Windows
    strategy:
      matrix:
        os: [windows-2019]
        arch: [x64]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - uses: actions/checkout@v4

      - name: Use Node.js 16
        uses: actions/setup-node@v4
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 16
          architecture: ${{ matrix.arch }}

      - name: Use Python 3.11 # node-gyp < 10 breaks with 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - run: npm install
      - run: npm run compile
      - run: node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true

  rebuild-macos:
    name: Rebuild macOS
    strategy:
      matrix:
        os: [macOS-11]
        arch: [x64]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - uses: actions/checkout@v4

      - name: Use Node.js 16
        uses: actions/setup-node@v4
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 16
          architecture: ${{ matrix.arch }}

      - name: Use Python 3.11 # node-gyp < 10 breaks with 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - run: npm install
      - run: npm run compile
      - run: node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
