on:
  push:
    tags:
      - ena-*

name: Rebuild for Electron

jobs:
  rebuild-docker:
    name: Rebuild docker
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    container: ubuntu:16.04
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - name: Install Dependencies for Ubuntu
        # git >= 2.18 required for actions/checkout git support
        run: apt update && apt install -y software-properties-common && add-apt-repository -y ppa:git-core/ppa && apt update && apt install -y git wget build-essential clang-8 lld-8 python3 libkrb5-dev libc++-dev zlib1g-dev
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Setup python 3.6
        env:
          CC: clang
          CXX: clang++
        run: |
          mkdir ~/python
          cd ~/python
          wget https://www.python.org/ftp/python/3.6.15/Python-3.6.15.tgz
          tar -xvf Python-3.6.15.tgz
          cd Python-3.6.15
          ./configure
          make
          make install

      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: implausible/setup-node@feature/expose-architecture-override
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 12
          node-arch: ${{ matrix.arch }}

      # We're running in docker without other users
      - name: Set npm config
        run: npm config set unsafe-perm true

      # 16.04 comes with 1.0.2
      - name: Install OpenSSL 1.1.1l
        run: sh -c 'cd /tmp && wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz && wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz.sha256 && echo "$(cat openssl-1.1.1l.tar.gz.sha256) openssl-1.1.1l.tar.gz" | sha256sum -c && tar xvf openssl-1.1.1l.tar.gz && cd openssl-1.1.1l && ./config no-ssl2 no-ssl3 no-comp && make && make test && make install'

      - run: git config --global --add safe.directory /__w/electron-npg-automator/electron-npg-automator
      - run: npm install
      - run: npm run compile
      - run: |
          update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100
          update-alternatives --install /usr/bin/ld ld /usr/bin/lld-8 100
          node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          AR: "/usr/lib/llvm-8/bin/llvm-ar"
          NM: "/usr/lib/llvm-8/bin/llvm-nm"
          # ranlib is not needed, and doesn't support .bc files in .a
          RANLIB: /bin/true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: |
          update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100
          update-alternatives --install /usr/bin/ld ld /usr/bin/lld-8 100
          node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          AR: "/usr/lib/llvm-8/bin/llvm-ar"
          NM: "/usr/lib/llvm-8/bin/llvm-nm"
          # ranlib is not needed, and doesn't support .bc files in .a
          RANLIB: /bin/true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: |
          update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100
          update-alternatives --install /usr/bin/ld ld /usr/bin/lld-8 100
          node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          AR: "/usr/lib/llvm-8/bin/llvm-ar"
          NM: "/usr/lib/llvm-8/bin/llvm-nm"
          # ranlib is not needed, and doesn't support .bc files in .a
          RANLIB: /bin/true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true

  rebuild-windows:
    name: Rebuild Windows
    strategy:
      matrix:
        os: [windows-2019]
        arch: [x86, x64]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: implausible/setup-node@feature/expose-architecture-override
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 12
          node-arch: ${{ matrix.arch }}

      - run: npm install
      - run: npm run compile
      - run: node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-win32-${{ matrix.arch == 'x64' && 'x64' || 'ia32' }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-win32-${{ matrix.arch == 'x64' && 'x64' || 'ia32' }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-win32-${{ matrix.arch == 'x64' && 'x64' || 'ia32' }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true

  rebuild-macos:
    name: Rebuild macOS
    strategy:
      matrix:
        os: [macOS-10.15]
        arch: [x64]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print Tag Ref
        run: echo ${{ github.ref }}

      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: implausible/setup-node@feature/expose-architecture-override
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: 12
          node-arch: ${{ matrix.arch }}

      - run: npm install
      - run: npm run compile
      - run: node ci/prepare.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-darwin-${{ matrix.arch }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/build.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-darwin-${{ matrix.arch }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
      - run: node ci/deploy.js
        env:
          electron_npg_automator_gh_token: ${{ secrets.electron_npg_automator_gh_token }}
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          npm_config_openssl_bin_url: https://axonodegit.s3.amazonaws.com/nodegit/nodegit/openssl-1.1.1l-darwin-${{ matrix.arch }}.tar.gz
          GYP_DEFINES: use_obsolete_asm=true
          BUILD_ONLY: true
          electron_npg_automator_module: nodegit/nodegit
          electron_npg_automator_use_git_clone: true
